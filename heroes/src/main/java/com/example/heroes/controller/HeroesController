package com.example.heroes.controller;

import com.example.heroes.repository.HeroesRepository;
import com.example.heroes.document.Heroes;
import com.example.heroes.service.HeroesService;
import lombok.extern.slf4j.slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import static com.example.heroes.constans.HeroesConstant.HEROES_ENDPOINT_LOCAL;

@RestController
@Slf4j
public class HeroesController{
    HeroesService heroesService;
    HeroesRepository heroesRepository;
    private static final org.slf4j.Logger log= org.slf4j.LoggerFactory.getLogger(HeroesController.class);

    public HeroesController(HeroesService heroesService,HeroesRepository heroesRepository){
        this.heroesRepository=heroesRepository;
        this.heroesService=heroesService;
    }

    @GetMapping(HEROES_ENDPOINT_LOCAL)
    public Flux<Heroes>getAllItems(){
        log.info("requesting the list off all heroes");
        return heroesService.findAll();
    }

    @GetMapping(HEROES_ENDPOINT_LOCAL+"/id")
    public Mono<ResponseEntity<Heroes>>findByIdHero(@PathVariable String id){
        log.info("requesting the hero with id{}",id);
        return heroesService.findByIdHero(id)
                .map((item)->new ResponseEntity<>(item,HttpStatus.OK))
                .defaultIfEmpty(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @PostMapping(HEROES_ENDPOINT_LOCAL)
    @ResponseStatus(code=HttpStatus.CREATED)
    public Mono<Heroes>createHero(@RequestBody Heroes heroes){
        log.info("a new hero created");
        return heroesService.save(heroes);
    }
    @DeleteMapping(HEROES_ENDPOINT_LOCAL+"/id")
    @ResponseStatus(code=HttpStatus.CONTINUE)
    public Mono <HttpStatus>deletebyIDHero(@PathVariable String id){
        heroesService.deleteBYIdHero(id);
        log.info("deleting a hero with id{}",id);
        return Mono.just(HttpStatus.CONTINUE);
    }
}